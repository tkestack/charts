image:
  api:
    repository: ccr.ccs.tencentyun.com/tke-market/dify-api
    tag: "1.5.0"
    pullPolicy: IfNotPresent

  web:
    repository: ccr.ccs.tencentyun.com/tke-market/dify-web
    tag: "1.5.0"
    pullPolicy: IfNotPresent

  sandbox:
    repository: ccr.ccs.tencentyun.com/tke-market/dify-sandbox
    tag: "0.2.12"
    pullPolicy: IfNotPresent

  proxy:
    repository: ccr.ccs.tencentyun.com/tke-market/nginx
    tag: 1.27.4
    pullPolicy: IfNotPresent

  ssrfProxy:
    repository: ccr.ccs.tencentyun.com/tke-market/squid
    tag: latest
    pullPolicy: IfNotPresent

  pluginDaemon:
    repository: ccr.ccs.tencentyun.com/tke-market/dify-plugin-daemon
    tag: 0.1.2-local
    pullPolicy: IfNotPresent

api:
  enabled: true
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  updateStrategy: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  extraEnv:
  - name: CHECK_UPDATE_URL
    value: ""
  - name: CODE_MAX_NUMBER
    value: "9223372036854775807"
  - name: CODE_MIN_NUMBER
    value: "-9223372036854775808"
  - name: CODE_MAX_STRING_LENGTH
    value: "80000"
  - name: TEMPLATE_TRANSFORM_MAX_LENGTH
    value: "80000"
  - name: CODE_MAX_STRING_ARRAY_LENGTH
    value: "30"
  - name: CODE_MAX_OBJECT_ARRAY_LENGTH
    value: "30"
  - name: CODE_MAX_NUMBER_ARRAY_LENGTH
    value: "1000"
  service:
    port: 5001
    annotations: {}
    labels: {}
    clusterIP: ""
  logLevel: INFO
  url:
    consoleApi: ""
    consoleWeb: ""
    serviceApi: ""
    appApi: ""
    appWeb: ""
    files: ""
    marketplaceApi: "https://marketplace.dify.ai"
    marketplace: "https://marketplace.dify.ai"
  mail:
    defaultSender: "YOUR EMAIL FROM (e.g.: no-reply <no-reply@dify.ai>)"
    type: "resend"
    resend:
      apiKey: "xxxx"
      apiUrl: https://api.resend.com
    smtp:
      server: "smtp.server.com"
      port: 465
      username: "YOUR EMAIL"
      password: "YOUR EMAIL PASSWORD"
      tls:
        enabled: true
        optimistic: false
  migration: true
  secretKey: "sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U"
  persistence:
    mountPath: "/app/api/storage"
    annotations:
      helm.sh/resource-policy: keep
    persistentVolumeClaim:
      existingClaim: ""
      storageClass: "cfs"
      accessModes: ReadWriteMany
      size: 10Gi
      subPath: ""
  serviceAccount:
    create: false
    name: ""
    automountServiceAccountToken: false
    annotations: {}

worker:
  enabled: true
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  updateStrategy: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  extraEnv:
  logLevel: INFO
  serviceAccount:
    create: false
    name: ""
    automountServiceAccountToken: false
    annotations: {}

proxy:
  enabled: true
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  priorityClassName: ""
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  clientMaxBodySize: ""
  updateStrategy: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  extraEnv:
  log:
    persistence:
      enabled: false
      mountPath: "/var/log/nginx"
      annotations:
        helm.sh/resource-policy: keep
      persistentVolumeClaim:
        existingClaim: ""
        storageClass:
        accessModes: ReadWriteMany
        size: 1Gi
        subPath: ""
  service:
    port: 80
    annotations: {}
    labels: {}
    clusterIP: ""
  serviceAccount:
    create: false
    name: ""
    automountServiceAccountToken: false
    annotations: {}

web:
  enabled: true
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  updateStrategy: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  extraEnv:
  - name: EDITION
    value: "SELF_HOSTED"
  service:
    port: 3000
    annotations: {}
    labels: {}
    clusterIP: ""
  serviceAccount:
    create: false
    name: ""
    automountServiceAccountToken: false
    annotations: {}
  enableServiceLinks: false

sandbox:
  enabled: true
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  priorityClassName: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  livenessProbe:
    enabled: true
    initialDelaySeconds: 1
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 2
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2
    successThreshold: 1
  updateStrategy: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  extraEnv:
  - name: WORKER_TIMEOUT
    value: "15"
  service:
    port: 8194
    annotations: {}
    labels: {}
    clusterIP: ""
  auth:
    apiKey: "dify-sandbox"
  serviceAccount:
    create: false
    name: ""
    automountServiceAccountToken: false
    annotations: {}

ssrfProxy:
  enabled: false
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  priorityClassName: ""
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  updateStrategy: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  extraEnv:
  log:
    persistence:
      enabled: false
      mountPath: "/var/log/squid"
      annotations:
        helm.sh/resource-policy: keep
      persistentVolumeClaim:
        existingClaim: ""
        storageClass: cfs
        accessModes: ReadWriteMany
        size: 10Gi
        subPath: ""
  service:
    port: 3128
    annotations: {}
    labels: {}
    clusterIP: ""
  serviceAccount:
    create: false
    name: ""
    automountServiceAccountToken: false
    annotations: {}

pluginDaemon:
  enabled: true
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  priorityClassName: ""
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  updateStrategy: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  extraEnv:
  service:
    ports:
      daemon: 5002
      pluginInstall:
    annotations: {}
    labels: {}
    clusterIP: ""
  auth:
    serverKey: "lYkiYYT6owG+71oLerGzA7GXCgOT++6ovaezWAjpCjf+Sjc3ZtU+qUEi"
    difyApiKey: "QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1"
  persistence:
    mountPath: "/app/storage"
    annotations:
      helm.sh/resource-policy: keep
    persistentVolumeClaim:
      existingClaim: ""
      storageClass: cfs
      accessModes: ReadWriteMany
      size: 10Gi
      subPath: ""
  marketplace:
    enabled: true
    apiProxyEnabled: false
  serviceAccount:
    create: false
    name: ""
    automountServiceAccountToken: false
    annotations: {}

postgresql:
  enabled: true
  name: postgres
  global:
    storageClass: ""
    postgresql:
      auth:
        postgresPassword: "difyai123456"
        username: ""
        password: ""
        database: "dify"
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 15.3.0-debian-11-r7
    pullPolicy: IfNotPresent
  architecture: replication
  primary:
    resources:
      limits: {}
      requests: {}
    persistence:
      enabled: true
      storageClass: "cbs"
      accessModes:
        - ReadWriteOnce
      size: 10Gi

    affinity: {}

    tolerations: []

  readReplicas:
    name: read
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    persistence:
      enabled: true
      storageClass: "cbs"
      accessModes:
        - ReadWriteOnce
      size: 10Gi

    affinity: {}

    tolerations: []

weaviate:
  enabled: true
  image:
    registry: docker.io
    tag: 1.19.1
    repo: semitechnologies/weaviate
    pullPolicy: IfNotPresent
    pullSecrets: []

  command: ["/bin/weaviate"]
  args:
    - "--host"
    - "0.0.0.0"
    - "--port"
    - "8080"
    - "--scheme"
    - "http"
    - "--config-file"
    - "/weaviate-config/conf.yaml"
    - --read-timeout=60s
    - --write-timeout=60s

  initContainers:
    sysctlInitContainer:
      enabled: true
      sysctlVmMaxMapCount: 524288
      image:
        registry: docker.io
        repo: alpine
        tag: latest
        pullPolicy: IfNotPresent

    extraInitContainers: {}

  replicas: 1
  resources:
    {}

  serviceAccountName:

  storage:
    size: 50Gi
    storageClassName: "cfs"

  service:
    name: weaviate
    type: ClusterIP
    loadBalancerSourceRanges: []
    clusterIP:
    annotations: {}

  startupProbe:
    enabled: false

    initialDelaySeconds: 300
    periodSeconds: 60
    failureThreshold: 50
    successThreshold: 1
    timeoutSeconds: 3

  livenessProbe:
    initialDelaySeconds: 900
    periodSeconds: 10
    failureThreshold: 30
    successThreshold: 1
    timeoutSeconds: 3

  readinessProbe:
    initialDelaySeconds: 3
    periodSeconds: 10
    failureThreshold: 3
    successThreshold: 1
    timeoutSeconds: 3

  terminationGracePeriodSeconds: 600

  authentication:
    anonymous_access:
      enabled: false
    apikey:
      enabled: true
      allowed_keys:
        - "WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih"
      users:
        - hello@dify.ai
    oidc:
      enabled: false

  authorization:
    admin_list:
      enabled: true
      users:
      - hello@dify.ai
      read_only_users:

  query_defaults:
    limit: 100
  debug: false

  env:
    CLUSTER_GOSSIP_BIND_PORT: 7000
    CLUSTER_DATA_BIND_PORT: 7001
    GOGC: 100

    PROMETHEUS_MONITORING_ENABLED: false


    QUERY_MAXIMUM_RESULTS: 100000

    TRACK_VECTOR_DIMENSIONS: false

    REINDEX_VECTOR_DIMENSIONS_AT_STARTUP: false

    AUTHENTICATION_APIKEY_ENABLED: "true"
    AUTHENTICATION_APIKEY_ALLOWED_KEYS: "WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih"
    AUTHENTICATION_APIKEY_USERS: "hello@dify.ai"
    AUTHORIZATION_ADMINLIST_ENABLED: "true"
    AUTHORIZATION_ADMINLIST_USERS: "hello@dify.ai"
  envSecrets:

  backups:
    filesystem:
      enabled: false
      envconfig:
        BACKUP_FILESYSTEM_PATH: /tmp/backups

    s3:
      enabled: false
      serviceAccountName:

      envconfig:
        BACKUP_S3_BUCKET: weaviate-backups

      secrets: {}

      envSecrets: {}

    gcs:
      enabled: false
      envconfig:
        BACKUP_GCS_BUCKET: weaviate-backups

      secrets: {}

      envSecrets: {}

    azure:
      enabled: false
      envconfig:
        BACKUP_AZURE_CONTAINER: weaviate-backups

      secrets: {}

      envSecrets: {}

  modules:
    default_vectorizer_module: none

  custom_config_map:
    enabled: false
    name: "custom-config"

  annotations:

  nodeSelector:

  tolerations:

  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          podAffinityTerm:
            topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                    - weaviate

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations:
    {}
  hosts:
    - host: dify-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

resources:
  {}

nodeSelector: {}

tolerations: []

affinity: {}

redis:
  enabled: true

  global:
    imageRegistry: ""
    imagePullSecrets: []
    security:
      allowInsecureImages: true
    storageClass: ""
    redis:
      password: ""


  kubeVersion: ""
  nameOverride: ""
  fullnameOverride: ""
  commonLabels: {}
  commonAnnotations: {}
  secretAnnotations: {}
  clusterDomain: cluster.local
  extraDeploy: []
  useHostnames: true
  nameResolutionThreshold: 5
  nameResolutionTimeout: 5

  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity

  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 7.0.11-debian-11-r12
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false

  architecture: replication
  auth:
    enabled: true
    sentinel: true
    password: "difyai123456"
    existingSecret: ""
    existingSecretPasswordKey: ""
    usePasswordFiles: false

  commonConfiguration: |-
    appendonly yes
    save ""
  existingConfigmap: ""

  master:
    count: 1
    configuration: ""
    disableCommands:
      - FLUSHDB
      - FLUSHALL
    command: []
    args: []
    preExecCmds: []
    extraFlags: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    containerPorts:
      redis: 6379
    startupProbe:
      enabled: false
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    customStartupProbe: {}
    customLivenessProbe: {}
    customReadinessProbe: {}
    resources:
      limits: {}
      requests: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    kind: StatefulSet
    schedulerName: ""
    updateStrategy:
      type: RollingUpdate
    minReadySeconds: 0
    priorityClassName: ""
    hostAliases: []
    podLabels: {}
    podAnnotations: {}
    shareProcessNamespace: false
    podAffinityPreset: ""
    podAntiAffinityPreset: soft
    nodeAffinityPreset:
      type: ""
      key: ""
      values: []
    affinity: {}
    nodeSelector: {}
    tolerations: []
    topologySpreadConstraints: []
    dnsPolicy: ""
    dnsConfig: {}
    lifecycleHooks: {}
    extraVolumes: []
    extraVolumeMounts: []
    sidecars: []
    initContainers: []
    persistence:
      enabled: true
      medium: ""
      sizeLimit: ""
      path: /data
      subPath: ""
      subPathExpr: ""
      storageClass: "cbs"
      accessModes:
        - ReadWriteOnce
      size: 10Gi
      annotations: {}
      labels: {}
      selector: {}
      dataSource: {}
      existingClaim: ""
    service:
      type: ClusterIP
      ports:
        redis: 6379
      nodePorts:
        redis: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalIPs: []
      annotations: {}
      sessionAffinity: None
      sessionAffinityConfig: {}
    terminationGracePeriodSeconds: 30
    serviceAccount:
      create: true
      name: ""
      automountServiceAccountToken: true
      annotations: {}

  replica:
    replicaCount: 3
    configuration: ""
    disableCommands:
      - FLUSHDB
      - FLUSHALL
    command: []
    args: []
    preExecCmds: []
    extraFlags: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    containerPorts:
      redis: 6379
    startupProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 22
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    customStartupProbe: {}
    customLivenessProbe: {}
    customReadinessProbe: {}
    resources:
      limits: {}
      requests: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    schedulerName: ""
    updateStrategy:
      type: RollingUpdate
    minReadySeconds: 0
    priorityClassName: ""
    podManagementPolicy: ""
    hostAliases: []
    podLabels: {}
    podAnnotations: {}
    shareProcessNamespace: false
    podAffinityPreset: ""
    podAntiAffinityPreset: soft
    nodeAffinityPreset:
      type: ""
      key: ""
      values: []
    affinity: {}
    nodeSelector: {}
    tolerations: []
    topologySpreadConstraints: []
    dnsPolicy: ""
    dnsConfig: {}
    lifecycleHooks: {}
    extraVolumes: []
    extraVolumeMounts: []
    sidecars: []
    initContainers: []
    persistence:
      enabled: true
      medium: ""
      sizeLimit: ""
      path: /data
      subPath: ""
      subPathExpr: ""
      storageClass: "cbs"
      accessModes:
        - ReadWriteOnce
      size: 10Gi
      annotations: {}
      labels: {}
      selector: {}
      dataSource: {}
      existingClaim: ""
    service:
      type: ClusterIP
      ports:
        redis: 6379
      nodePorts:
        redis: ""
      externalTrafficPolicy: Cluster
      internalTrafficPolicy: Cluster
      extraPorts: []
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      annotations: {}
      sessionAffinity: None
      sessionAffinityConfig: {}
    terminationGracePeriodSeconds: 30
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 11
      targetCPU: ""
      targetMemory: ""
    serviceAccount:
      create: true
      name: ""
      automountServiceAccountToken: true
      annotations: {}

  sentinel:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 7.0.11-debian-11-r10
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      debug: false
    annotations: {}
    masterSet: mymaster
    quorum: 2
    getMasterTimeout: 220
    automateClusterRecovery: false
    redisShutdownWaitFailover: true
    downAfterMilliseconds: 60000
    failoverTimeout: 180000
    parallelSyncs: 1
    configuration: ""
    command: []
    args: []
    preExecCmds: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    containerPorts:
      sentinel: 26379
    startupProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 22
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 6
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 6
    customStartupProbe: {}
    customLivenessProbe: {}
    customReadinessProbe: {}
    persistence:
      enabled: false
      storageClass: "cbs"
      accessModes:
        - ReadWriteOnce
      size: 10Gi
      annotations: {}
      labels: {}
      selector: {}
      dataSource: {}
      medium: ""
      sizeLimit: ""
    resources:
      limits: {}
      requests: {}
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    lifecycleHooks: {}
    extraVolumes: []
    extraVolumeMounts: []
    service:
      type: ClusterIP
      ports:
        redis: 6379
        sentinel: 26379
      nodePorts:
        redis: ""
        sentinel: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      annotations: {}
      sessionAffinity: None
      sessionAffinityConfig: {}
      headless:
        annotations: {}
    terminationGracePeriodSeconds: 30


  serviceBindings:
    enabled: false

  networkPolicy:
    enabled: false
    allowExternal: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  podSecurityPolicy:
    create: false
    enabled: false
  rbac:
    create: false
    rules: []
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
    annotations: {}
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  tls:
    enabled: false
    authClients: true
    autoGenerated: false
    existingSecret: ""
    certificatesSecret: ""
    certFilename: ""
    certKeyFilename: ""
    certCAFilename: ""
    dhParamsFilename: ""


  metrics:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.50.0-debian-11-r13
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    startupProbe:
      enabled: false
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3
    customStartupProbe: {}
    customLivenessProbe: {}
    customReadinessProbe: {}
    command: []
    redisTargetHost: "localhost"
    extraArgs: {}
    extraEnvVars: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    extraVolumes: []
    extraVolumeMounts: []
    resources:
      limits: {}
      requests: {}
    podLabels: {}
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9121"
    service:
      type: ClusterIP
      port: 9121
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      annotations: {}
      clusterIP: ""
    serviceMonitor:
      enabled: false
      namespace: ""
      interval: 30s
      scrapeTimeout: ""
      relabellings: []
      metricRelabelings: []
      honorLabels: false
      additionalLabels: {}
      podTargetLabels: []
    prometheusRule:
      enabled: false
      namespace: ""
      additionalLabels: {}
      rules: []

  volumePermissions:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r118
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    resources:
      limits: {}
      requests: {}
    containerSecurityContext:
      runAsUser: 0

  sysctl:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r118
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    command: []
    mountHostSys: false
    resources:
      limits: {}
      requests: {}

  useExternalDNS:
    enabled: false
    suffix: ""
    annotationKey: external-dns.alpha.kubernetes.io/
    additionalAnnotations: {}

externalPostgres:
  enabled: false
  username: "postgres"
  password: "difyai123456"
  address: localhost
  port: 5432
  database:
    api: "dify"
    pluginDaemon: "dify_plugin"
  maxOpenConns: 20
  maxIdleConns: 5

externalS3:
  enabled: false
  endpoint: "https://xxx.r2.cloudflarestorage.com"
  pathStyle: false
  accessKey: "ak-difyai"
  secretKey: "sk-difyai"
  useSSL: false
  bucketName:
    api: "difyai"
    pluginDaemon:
  useIAM: false
  region: "us-east-1"

externalAzureBlobStorage:
  enabled: false
  url: "https://<your_account_name>.blob.core.windows.net"
  account: "https://xxx.r2.cloudflarestorage.com"
  key: "difyai"
  container: "difyai-container"

externalGCS:
  enabled: false
  bucketName:
    api: "difyai"
    pluginDaemon:
  serviceAccountJsonBase64: ""

externalCOS:
  enabled: false
  secretKey: "your-secret-key"
  secretId: "your-secret-id"
  region: "your-region"
  bucketName:
    api: "your-bucket-name"
    pluginDaemon:
  scheme: "your-scheme"

externalOBS:
  enabled: false
  endpoint: "https://your-endpoint"
  accessKey: "your-secret-id"
  secretKey: "your-secret-key"
  bucketName:
    api: "your-bucket-name"
    pluginDaemon:

externalTOS:
  enabled: false
  endpoint: "https://tos-cn-beijing.volces.com"
  accessKey: "your-access-key"
  secretKey: "your-secret-key"
  bucketName:
    api: "your-bucket-name"
    pluginDaemon:
  region: "cn-beijing"

externalRedis:
  enabled: false
  host: "redis.example"
  port: 6379
  username: ""
  password: "difyai123456"
  useSSL: false

externalWeaviate:
  enabled: false
  endpoint: "http://weaviate:8080"
  apiKey: "WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih"

externalQdrant:
  enabled: false
  endpoint: "https://your-qdrant-cluster-url.qdrant.tech/"
  apiKey: "ak-difyai"
  timeout: 20
  grpc:
    enabled: false
    port: 6334

externalMilvus:
  enabled: false
  uri: "http://your-milvus.domain:19530"
  database: 'default'
  token: ""
  user: ""
  password: ""

externalPgvector:
  enabled: false
  username: "postgres"
  password: "difyai123456"
  address: "pgvector"
  port: 5432
  dbName: dify

externalTencentVectorDB:
  enabled: false
  url: "your-tencent-vector-db-url"
  apiKey: "your-tencent-vector-db-api-key"
  timeout: 30
  username: "root"
  database: "dify"
  shard: 1
  replicas: 2

externalMyScaleDB:
  enabled: false
  host: "myscale"
  port: 8123
  user: "default"
  password: ""
  database: "dify"
  ftsParams: ""

externalTableStore:
  enabled: false
  endpoint: "endpoint"
  instanceName: "instance-name"
  accessKeyId: "your-secret-id"
  accessKeySecret: "your-secret-key"
