{{- if .Values.operator.enabled }}
apiVersion: {{ template "prometheus-operator.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "prometheus-operator.operator.fullname" . }}
  labels: {{- include "prometheus-operator.operator.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels: {{- include "prometheus-operator.operator.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "prometheus-operator.operator.labels" . | nindent 8 }}
      annotations:
{{- if .Values.operator.podAnnotations }}
{{ toYaml .Values.operator.podAnnotations | indent 8 }}
{{- end }}
    spec:
      serviceAccountName: {{ template "prometheus-operator.operator.serviceAccountName" . }}
      {{- if .Values.operator.schedulerName }}
      schedulerName: {{ .Values.operator.schedulerName | quote }}
      {{- end }}
      {{- if .Values.operator.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.operator.securityContext.runAsUser }}
        fsGroup: {{ .Values.operator.securityContext.fsGroup }}
        runAsNonRoot: {{ .Values.operator.securityContext.runAsNonRoot }}
      {{- end }}
      {{- if .Values.operator.nodeSelector }}
      nodeSelector: {{- include "prometheus-operator.tplValue" (dict "value" .Values.operator.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.operator.tolerations }}
      tolerations: {{- include "prometheus-operator.tplValue" (dict "value" .Values.operator.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.operator.priorityClassName }}
      priorityClassName: {{ .Values.operator.priorityClassName }}
      {{- end }}
      affinity:
        {{- if .Values.operator.nodeAffinity }}
        nodeAffinity: {{- include "prometheus-operator.tplValue" (dict "value" .Values.operator.nodeAffinity "context" $) | nindent 10 }}
        {{- end }}
        {{- if eq .Values.operator.podAntiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels: {{- include "prometheus-operator.operator.matchLabels" . | nindent 16 }}
        {{- else if eq .Values.operator.podAntiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
                labelSelector:
                  matchLabels: {{- include "prometheus-operator.operator.matchLabels" . | nindent 20 }}
        {{- end }}
        {{- if .Values.operator.podAffinity }}
        podAffinity: {{- include "prometheus-operator.tplValue" (dict "value" .Values.operator.podAffinity "context" $) | nindent 10 }}
        {{- end }}
      containers:
        - name: {{ template "prometheus-operator.name" . }}
          image: {{ template "prometheus-operator.image" . }}
          imagePullPolicy: {{ .Values.operator.image.pullPolicy }}
          args:
            {{- if .Values.operator.kubeletService.enabled }}
            - --kubelet-service={{ .Values.operator.kubeletService.namespace }}/{{ template "prometheus-operator.fullname" . }}-kubelet
            {{- end }}
            {{- if .Values.operator.logFormat }}
            - --log-format={{ .Values.operator.logFormat }}
            {{- end }}
            {{- if .Values.operator.logLevel }}
            - --log-level={{ .Values.operator.logLevel }}
            {{- end }}
            - --logtostderr=true
            - --localhost=127.0.0.1
            - --config-reloader-image={{ template "prometheus-operator.configmapReload.image" . }}
            - --prometheus-config-reloader={{ template "prometheus-operator.prometheusConfigReloader.image" . }}
          {{- if .Values.operator.configReloaderCpu }}
            - --config-reloader-cpu={{ .Values.operator.configReloaderCpu }}
          {{- end }}
          {{- if .Values.operator.configReloaderMemory }}
            - --config-reloader-memory={{ .Values.operator.configReloaderMemory }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /metrics
              port: http
{{ toYaml .Values.operator.livenessProbe | indent 12 }}
          readinessProbe:
            httpGet:
              path: /metrics
              port: http
{{ toYaml .Values.operator.readinessProbe | indent 12 }}
          resources: {{- toYaml .Values.operator.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
{{- end }}
